#*
*  Copyright 2017 Curity AB
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*#

#*
 * This view is shown to the user when they click the HTML authenticator's create account button.
 *
 * For a full list of variables available in this template and their associated values, do the following:
 *
 * 1. Create a file called globals.vm in <installation-dir>/usr/share/templates/overrides/fragments
 *
 * 2. Add the following to this new file:
 *
 * <!--
 *    All variables:
 *    #foreach ($entry in $_context.entrySet())
 *        $entry.key => $!entry.value
 *    #end
 * -->
 *
 * 3. Request this template again and view the HTML source code. All variables and their values will be shown in an
 *    HTML comment at the top of the file.
 *
 * For more information about using the Velocity templating language, refer to
 * http://velocity.apache.org/engine/devel/user-guide.html.
 *#

#define($_leftColumn)
<div class="login-info login-info-mobile-hide p4">
    <h2 class="mt1"><i class="icon ion-person-add inlineicon login-info-icon"></i>#message(
        "${_templatePrefix}.view.create-account")</h2>
    <h2 class="h3">#message("authenticator.username-password-authenticator.create-account.view.fill-form")</h2>
    <p>#message("authenticator.username-password-authenticator.create-account.view.description")</p>
    <div class="well well-border">
        <p><i class="icon ion-information-circled inlineicon"></i> #message(
            "authenticator.username-password-authenticator.create-account.view.info-message")</p>
    </div>
</div>
#end

#define($_rightColumn)

<form method="post" class="login-form">

    <div class="clearfix mxn1">
        <div class="sm-col sm-col-12 px1">
            <div class="self-service-profile-image self-service-profile-image-empty py2 clearfix">
                <div class="sm-col sm-col-3">
                    <img src="/assets/images/emptyprofile.svg" alt="profile image">
                </div>
            </div>
        </div>

        <div class="sm-col sm-col-12 px1">
            <label for="name.givenName">#message(
                "authenticator.username-password-authenticator.create-account.view.firstName")</label>
            <input type="text" name="name.givenName" id="name.givenName" value="$!{_postBack["name.givenName"]}"
                   class="block full-width mb1 field-light" autofocus>
        </div>

        <div class="sm-col sm-col-12 px1">
            <label for="name.familyName">#message(
                "authenticator.username-password-authenticator.create-account.view.lastName")</label>
            <input type="text" name="name.familyName" id="name.familyName" value="$!{_postBack["name.familyName"]}"
                   class="block full-width mb1 field-light">
        </div>

        <div class="sm-col sm-col-12 px1">
            <label for="primaryEmail">#message("authenticator.username-password-authenticator.create-account.view.email")</label>
            <input type="email" name="primaryEmail" id="primaryEmail" value="$!{_postBack["primaryEmail"]}"
                   class="block full-width mb1 field-light">
        </div>
        <div class="sm-col sm-col-12 px1">
            <label for="primaryPhoneNumber">#message(
                "authenticator.username-password-authenticator.create-account.view.phone")</label>
            <input type="text" name="primaryPhoneNumber" id="primaryPhoneNumber"
                   value="$!{_postBack["primaryPhoneNumber"]}" class="block full-width mb1 field-light">
        </div>
    </div>

    <label for="userName">#message("authenticator.username-password-authenticator.create-account.view.username")</label>
    <input type="text" name="userName" id="userName" value="$!{_postBack["userName"]}"
           class="block full-width mb1 field-light" autocapitalize="none">

    <label for="password">#message("authenticator.username-password-authenticator.create-account.view.password")</label>
    <input type="password" name="password" id="password" class="block full-width mb1 field-light">

    <label for="password2">#message("authenticator.username-password-authenticator.create-account.view.repeatPassword")</label>
    <input type="password" name="password2" id="password2" class="block full-width mb1 field-light">

    <div class="login-links mt3 clearfix">
        <div class="login-links-forgot sm-col md-col-12">
            <label class="block full-width mb2">
                <input type="checkbox" name="agreeToTerms" id="agreeToTerms">
                #message("authenticator.username-password-authenticator.create-account.view.terms")
            </label>
        </div>
    </div>

    <button type="submit" class="button button-fullwidth button-primary mt2">
        #message("authenticator.username-password-authenticator.create-account.view.button")
    </button>
</form>
#end

#*
 * The sections and variables defined above will be available in the layout. If the layout is overridden (i.e.,
 * third-party/base/layout.vm exists), that one will be used; otherwise, the default one will be used.
 *
 * If you plan to only override the layout for some pages, you should use a different template besides layout.vm. For
 * example, you could call that layout special-layout.vm. You could put this directly in the third-party directory,
 * but the convention would be to place it in third-party/base. In either case, this one would be used by only this
 * template while others would continue to use layout.vm.
 *
 * This technique can also be helpful during the development process. In such cases, you may create a layout that
 * you are testing out or one that prints all variables or extra debug statements. To use that one instead, use that
 * one as the path below. In such cases, you may also place the layout in the third-party-debug template package
 * directory (i.e., <installation-dir>/usr/share/templates/third-party-debug). When a layout is found there, it will
 * be used before any in third-party or provided. By placing tempaltes and layouts in this directory, it will be more
 * clear that the template is not meant for production use.
 *
 * Another helpful technique when the layout has been overriden everywhere is to save the provided layout in a file
 * called provided-layout.vm under third-party-debug. This will allow you to quickly return to the provided layout for
 * a particular template while continuing to use your custom one everwhere else on your site.
 *#
#parse("layouts/wide")
